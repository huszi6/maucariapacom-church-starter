# DO NOT MODIFY THIS FILE. This file is automatically generated by Tina
"""References another document, used as a foreign key"""
scalar Reference

""""""
scalar JSON

type SystemInfo {
  filename: String!
  title: String
  basename: String!
  hasReferences: Boolean
  breadcrumbs(excludeExtension: Boolean): [String!]!
  path: String!
  relativePath: String!
  extension: String!
  template: String!
  collection: Collection!
}

type Folder {
  name: String!
  path: String!
}

type PageInfo {
  hasPreviousPage: Boolean!
  hasNextPage: Boolean!
  startCursor: String!
  endCursor: String!
}

""""""
interface Node {
  id: ID!
}

""""""
interface Document {
  id: ID!
  _sys: SystemInfo
  _values: JSON!
}

"""A relay-compliant pagination connection"""
interface Connection {
  totalCount: Float!
  pageInfo: PageInfo!
}

type Query {
  getOptimizedQuery(queryString: String!): String
  collection(collection: String): Collection!
  collections: [Collection!]!
  node(id: String): Node!
  document(collection: String, relativePath: String): DocumentNode!
  staff(relativePath: String): Staff!
  staffConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: StaffFilter): StaffConnection!
  events(relativePath: String): Events!
  eventsConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: EventsFilter): EventsConnection!
  sermons(relativePath: String): Sermons!
  sermonsConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: SermonsFilter): SermonsConnection!
  ministries(relativePath: String): Ministries!
  ministriesConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: MinistriesFilter): MinistriesConnection!
  blog(relativePath: String): Blog!
  blogConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: BlogFilter): BlogConnection!
  siteInfo(relativePath: String): SiteInfo!
  siteInfoConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: SiteInfoFilter): SiteInfoConnection!
}

input DocumentFilter {
  staff: StaffFilter
  events: EventsFilter
  sermons: SermonsFilter
  ministries: MinistriesFilter
  blog: BlogFilter
  siteInfo: SiteInfoFilter
}

type DocumentConnectionEdges {
  cursor: String!
  node: DocumentNode
}

type DocumentConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [DocumentConnectionEdges]
}

type Collection {
  name: String!
  slug: String!
  label: String
  path: String!
  format: String
  matches: String
  templates: [JSON]
  fields: [JSON]
  documents(before: String, after: String, first: Float, last: Float, sort: String, filter: DocumentFilter, folder: String): DocumentConnection!
}

union DocumentNode = Staff | Events | Sermons | Ministries | Blog | SiteInfo | Folder

type Staff implements Node & Document {
  name: String!
  title: String!
  email: String
  phone: String
  bio: String
  order: Float
  draft: Boolean
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

input StringFilter {
  startsWith: String
  eq: String
  exists: Boolean
  in: [String]
}

input NumberFilter {
  lt: Float
  lte: Float
  gte: Float
  gt: Float
  eq: Float
  exists: Boolean
  in: [Float]
}

input BooleanFilter {
  eq: Boolean
  exists: Boolean
}

input StaffFilter {
  name: StringFilter
  title: StringFilter
  email: StringFilter
  phone: StringFilter
  bio: StringFilter
  order: NumberFilter
  draft: BooleanFilter
}

type StaffConnectionEdges {
  cursor: String!
  node: Staff
}

type StaffConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [StaffConnectionEdges]
}

type Events implements Node & Document {
  title: String!
  date: String!
  endDate: String
  time: String
  location: String!
  image: String!
  summary: String!
  tags: [String]
  registrationLink: String
  registrationRequired: Boolean
  draft: Boolean
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

input DatetimeFilter {
  after: String
  before: String
  eq: String
  exists: Boolean
  in: [String]
}

input ImageFilter {
  startsWith: String
  eq: String
  exists: Boolean
  in: [String]
}

input EventsFilter {
  title: StringFilter
  date: DatetimeFilter
  endDate: DatetimeFilter
  time: StringFilter
  location: StringFilter
  image: ImageFilter
  summary: StringFilter
  tags: StringFilter
  registrationLink: StringFilter
  registrationRequired: BooleanFilter
  draft: BooleanFilter
}

type EventsConnectionEdges {
  cursor: String!
  node: Events
}

type EventsConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [EventsConnectionEdges]
}

type Sermons implements Node & Document {
  title: String!
  slug: String
  date: String!
  speaker: String!
  series: String
  scripture: String
  audioUrl: String
  videoUrl: String
  image: String
  summary: String
  tags: [String]
  draft: Boolean
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

input SermonsFilter {
  title: StringFilter
  slug: StringFilter
  date: DatetimeFilter
  speaker: StringFilter
  series: StringFilter
  scripture: StringFilter
  audioUrl: StringFilter
  videoUrl: StringFilter
  image: ImageFilter
  summary: StringFilter
  tags: StringFilter
  draft: BooleanFilter
}

type SermonsConnectionEdges {
  cursor: String!
  node: Sermons
}

type SermonsConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [SermonsConnectionEdges]
}

type Ministries implements Node & Document {
  name: String!
  logo: String
  summary: String!
  coordinator: String
  contact: String
  schedule: String
  order: Float
  draft: Boolean
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

input MinistriesFilter {
  name: StringFilter
  logo: ImageFilter
  summary: StringFilter
  coordinator: StringFilter
  contact: StringFilter
  schedule: StringFilter
  order: NumberFilter
  draft: BooleanFilter
}

type MinistriesConnectionEdges {
  cursor: String!
  node: Ministries
}

type MinistriesConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [MinistriesConnectionEdges]
}

type BlogImage {
  url: String!
  alt: String!
}

type Blog implements Node & Document {
  title: String!
  slug: String
  pubDate: String!
  description: String!
  author: String
  image: BlogImage
  tags: [String]
  draft: Boolean
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

input BlogImageFilter {
  url: ImageFilter
  alt: StringFilter
}

input BlogFilter {
  title: StringFilter
  slug: StringFilter
  pubDate: DatetimeFilter
  description: StringFilter
  author: StringFilter
  image: BlogImageFilter
  tags: StringFilter
  draft: BooleanFilter
}

type BlogConnectionEdges {
  cursor: String!
  node: Blog
}

type BlogConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [BlogConnectionEdges]
}

type SiteInfo implements Node & Document {
  title: String!
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

input SiteInfoFilter {
  title: StringFilter
}

type SiteInfoConnectionEdges {
  cursor: String!
  node: SiteInfo
}

type SiteInfoConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [SiteInfoConnectionEdges]
}

type Mutation {
  addPendingDocument(collection: String!, relativePath: String!, template: String): DocumentNode!
  updateDocument(collection: String, relativePath: String!, params: DocumentUpdateMutation!): DocumentNode!
  deleteDocument(collection: String, relativePath: String!): DocumentNode!
  createDocument(collection: String, relativePath: String!, params: DocumentMutation!): DocumentNode!
  createFolder(collection: String, relativePath: String!): DocumentNode!
  updateStaff(relativePath: String!, params: StaffMutation!): Staff!
  createStaff(relativePath: String!, params: StaffMutation!): Staff!
  updateEvents(relativePath: String!, params: EventsMutation!): Events!
  createEvents(relativePath: String!, params: EventsMutation!): Events!
  updateSermons(relativePath: String!, params: SermonsMutation!): Sermons!
  createSermons(relativePath: String!, params: SermonsMutation!): Sermons!
  updateMinistries(relativePath: String!, params: MinistriesMutation!): Ministries!
  createMinistries(relativePath: String!, params: MinistriesMutation!): Ministries!
  updateBlog(relativePath: String!, params: BlogMutation!): Blog!
  createBlog(relativePath: String!, params: BlogMutation!): Blog!
  updateSiteInfo(relativePath: String!, params: SiteInfoMutation!): SiteInfo!
  createSiteInfo(relativePath: String!, params: SiteInfoMutation!): SiteInfo!
}

input DocumentUpdateMutation {
  staff: StaffMutation
  events: EventsMutation
  sermons: SermonsMutation
  ministries: MinistriesMutation
  blog: BlogMutation
  siteInfo: SiteInfoMutation
  relativePath: String
}

input DocumentMutation {
  staff: StaffMutation
  events: EventsMutation
  sermons: SermonsMutation
  ministries: MinistriesMutation
  blog: BlogMutation
  siteInfo: SiteInfoMutation
}

input StaffMutation {
  name: String
  title: String
  email: String
  phone: String
  bio: String
  order: Float
  draft: Boolean
}

input EventsMutation {
  title: String
  date: String
  endDate: String
  time: String
  location: String
  image: String
  summary: String
  tags: [String]
  registrationLink: String
  registrationRequired: Boolean
  draft: Boolean
}

input SermonsMutation {
  title: String
  slug: String
  date: String
  speaker: String
  series: String
  scripture: String
  audioUrl: String
  videoUrl: String
  image: String
  summary: String
  tags: [String]
  draft: Boolean
}

input MinistriesMutation {
  name: String
  logo: String
  summary: String
  coordinator: String
  contact: String
  schedule: String
  order: Float
  draft: Boolean
}

input BlogImageMutation {
  url: String
  alt: String
}

input BlogMutation {
  title: String
  slug: String
  pubDate: String
  description: String
  author: String
  image: BlogImageMutation
  tags: [String]
  draft: Boolean
}

input SiteInfoMutation {
  title: String
}

schema {
  query: Query
  mutation: Mutation
}
