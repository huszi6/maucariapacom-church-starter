//@ts-nocheck
  // DO NOT MODIFY THIS FILE. This file is automatically generated by Tina
  export function gql(strings: TemplateStringsArray, ...args: string[]): string {
    let str = ''
    strings.forEach((string, i) => {
      str += string + (args[i] || '')
    })
    return str
  }
  export type Maybe<T> = T | null;
export type InputMaybe<T> = Maybe<T>;
export type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };
export type MakeEmpty<T extends { [key: string]: unknown }, K extends keyof T> = { [_ in K]?: never };
export type Incremental<T> = T | { [P in keyof T]?: P extends ' $fragmentName' | '__typename' ? T[P] : never };
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: { input: string; output: string; }
  String: { input: string; output: string; }
  Boolean: { input: boolean; output: boolean; }
  Int: { input: number; output: number; }
  Float: { input: number; output: number; }
  /** References another document, used as a foreign key */
  Reference: { input: any; output: any; }
  JSON: { input: any; output: any; }
};

export type SystemInfo = {
  __typename?: 'SystemInfo';
  filename: Scalars['String']['output'];
  title?: Maybe<Scalars['String']['output']>;
  basename: Scalars['String']['output'];
  hasReferences?: Maybe<Scalars['Boolean']['output']>;
  breadcrumbs: Array<Scalars['String']['output']>;
  path: Scalars['String']['output'];
  relativePath: Scalars['String']['output'];
  extension: Scalars['String']['output'];
  template: Scalars['String']['output'];
  collection: Collection;
};


export type SystemInfoBreadcrumbsArgs = {
  excludeExtension?: InputMaybe<Scalars['Boolean']['input']>;
};

export type Folder = {
  __typename?: 'Folder';
  name: Scalars['String']['output'];
  path: Scalars['String']['output'];
};

export type PageInfo = {
  __typename?: 'PageInfo';
  hasPreviousPage: Scalars['Boolean']['output'];
  hasNextPage: Scalars['Boolean']['output'];
  startCursor: Scalars['String']['output'];
  endCursor: Scalars['String']['output'];
};

export type Node = {
  id: Scalars['ID']['output'];
};

export type Document = {
  id: Scalars['ID']['output'];
  _sys?: Maybe<SystemInfo>;
  _values: Scalars['JSON']['output'];
};

/** A relay-compliant pagination connection */
export type Connection = {
  totalCount: Scalars['Float']['output'];
  pageInfo: PageInfo;
};

export type Query = {
  __typename?: 'Query';
  getOptimizedQuery?: Maybe<Scalars['String']['output']>;
  collection: Collection;
  collections: Array<Collection>;
  node: Node;
  document: DocumentNode;
  staff: Staff;
  staffConnection: StaffConnection;
  events: Events;
  eventsConnection: EventsConnection;
  sermons: Sermons;
  sermonsConnection: SermonsConnection;
  ministries: Ministries;
  ministriesConnection: MinistriesConnection;
  blog: Blog;
  blogConnection: BlogConnection;
  siteInfo: SiteInfo;
  siteInfoConnection: SiteInfoConnection;
};


export type QueryGetOptimizedQueryArgs = {
  queryString: Scalars['String']['input'];
};


export type QueryCollectionArgs = {
  collection?: InputMaybe<Scalars['String']['input']>;
};


export type QueryNodeArgs = {
  id?: InputMaybe<Scalars['String']['input']>;
};


export type QueryDocumentArgs = {
  collection?: InputMaybe<Scalars['String']['input']>;
  relativePath?: InputMaybe<Scalars['String']['input']>;
};


export type QueryStaffArgs = {
  relativePath?: InputMaybe<Scalars['String']['input']>;
};


export type QueryStaffConnectionArgs = {
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<StaffFilter>;
};


export type QueryEventsArgs = {
  relativePath?: InputMaybe<Scalars['String']['input']>;
};


export type QueryEventsConnectionArgs = {
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<EventsFilter>;
};


export type QuerySermonsArgs = {
  relativePath?: InputMaybe<Scalars['String']['input']>;
};


export type QuerySermonsConnectionArgs = {
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<SermonsFilter>;
};


export type QueryMinistriesArgs = {
  relativePath?: InputMaybe<Scalars['String']['input']>;
};


export type QueryMinistriesConnectionArgs = {
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<MinistriesFilter>;
};


export type QueryBlogArgs = {
  relativePath?: InputMaybe<Scalars['String']['input']>;
};


export type QueryBlogConnectionArgs = {
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<BlogFilter>;
};


export type QuerySiteInfoArgs = {
  relativePath?: InputMaybe<Scalars['String']['input']>;
};


export type QuerySiteInfoConnectionArgs = {
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<SiteInfoFilter>;
};

export type DocumentFilter = {
  staff?: InputMaybe<StaffFilter>;
  events?: InputMaybe<EventsFilter>;
  sermons?: InputMaybe<SermonsFilter>;
  ministries?: InputMaybe<MinistriesFilter>;
  blog?: InputMaybe<BlogFilter>;
  siteInfo?: InputMaybe<SiteInfoFilter>;
};

export type DocumentConnectionEdges = {
  __typename?: 'DocumentConnectionEdges';
  cursor: Scalars['String']['output'];
  node?: Maybe<DocumentNode>;
};

export type DocumentConnection = Connection & {
  __typename?: 'DocumentConnection';
  pageInfo: PageInfo;
  totalCount: Scalars['Float']['output'];
  edges?: Maybe<Array<Maybe<DocumentConnectionEdges>>>;
};

export type Collection = {
  __typename?: 'Collection';
  name: Scalars['String']['output'];
  slug: Scalars['String']['output'];
  label?: Maybe<Scalars['String']['output']>;
  path: Scalars['String']['output'];
  format?: Maybe<Scalars['String']['output']>;
  matches?: Maybe<Scalars['String']['output']>;
  templates?: Maybe<Array<Maybe<Scalars['JSON']['output']>>>;
  fields?: Maybe<Array<Maybe<Scalars['JSON']['output']>>>;
  documents: DocumentConnection;
};


export type CollectionDocumentsArgs = {
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<DocumentFilter>;
  folder?: InputMaybe<Scalars['String']['input']>;
};

export type DocumentNode = Staff | Events | Sermons | Ministries | Blog | SiteInfo | Folder;

export type Staff = Node & Document & {
  __typename?: 'Staff';
  name: Scalars['String']['output'];
  title: Scalars['String']['output'];
  image: Scalars['String']['output'];
  email?: Maybe<Scalars['String']['output']>;
  phone?: Maybe<Scalars['String']['output']>;
  bio?: Maybe<Scalars['String']['output']>;
  order?: Maybe<Scalars['Float']['output']>;
  draft?: Maybe<Scalars['Boolean']['output']>;
  id: Scalars['ID']['output'];
  _sys: SystemInfo;
  _values: Scalars['JSON']['output'];
};

export type StringFilter = {
  startsWith?: InputMaybe<Scalars['String']['input']>;
  eq?: InputMaybe<Scalars['String']['input']>;
  exists?: InputMaybe<Scalars['Boolean']['input']>;
  in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};

export type ImageFilter = {
  startsWith?: InputMaybe<Scalars['String']['input']>;
  eq?: InputMaybe<Scalars['String']['input']>;
  exists?: InputMaybe<Scalars['Boolean']['input']>;
  in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};

export type NumberFilter = {
  lt?: InputMaybe<Scalars['Float']['input']>;
  lte?: InputMaybe<Scalars['Float']['input']>;
  gte?: InputMaybe<Scalars['Float']['input']>;
  gt?: InputMaybe<Scalars['Float']['input']>;
  eq?: InputMaybe<Scalars['Float']['input']>;
  exists?: InputMaybe<Scalars['Boolean']['input']>;
  in?: InputMaybe<Array<InputMaybe<Scalars['Float']['input']>>>;
};

export type BooleanFilter = {
  eq?: InputMaybe<Scalars['Boolean']['input']>;
  exists?: InputMaybe<Scalars['Boolean']['input']>;
};

export type StaffFilter = {
  name?: InputMaybe<StringFilter>;
  title?: InputMaybe<StringFilter>;
  image?: InputMaybe<ImageFilter>;
  email?: InputMaybe<StringFilter>;
  phone?: InputMaybe<StringFilter>;
  bio?: InputMaybe<StringFilter>;
  order?: InputMaybe<NumberFilter>;
  draft?: InputMaybe<BooleanFilter>;
};

export type StaffConnectionEdges = {
  __typename?: 'StaffConnectionEdges';
  cursor: Scalars['String']['output'];
  node?: Maybe<Staff>;
};

export type StaffConnection = Connection & {
  __typename?: 'StaffConnection';
  pageInfo: PageInfo;
  totalCount: Scalars['Float']['output'];
  edges?: Maybe<Array<Maybe<StaffConnectionEdges>>>;
};

export type Events = Node & Document & {
  __typename?: 'Events';
  title: Scalars['String']['output'];
  date: Scalars['String']['output'];
  endDate?: Maybe<Scalars['String']['output']>;
  time?: Maybe<Scalars['String']['output']>;
  location: Scalars['String']['output'];
  image: Scalars['String']['output'];
  summary: Scalars['String']['output'];
  tags?: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  registrationLink?: Maybe<Scalars['String']['output']>;
  registrationRequired?: Maybe<Scalars['Boolean']['output']>;
  draft?: Maybe<Scalars['Boolean']['output']>;
  id: Scalars['ID']['output'];
  _sys: SystemInfo;
  _values: Scalars['JSON']['output'];
};

export type DatetimeFilter = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  eq?: InputMaybe<Scalars['String']['input']>;
  exists?: InputMaybe<Scalars['Boolean']['input']>;
  in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};

export type EventsFilter = {
  title?: InputMaybe<StringFilter>;
  date?: InputMaybe<DatetimeFilter>;
  endDate?: InputMaybe<DatetimeFilter>;
  time?: InputMaybe<StringFilter>;
  location?: InputMaybe<StringFilter>;
  image?: InputMaybe<ImageFilter>;
  summary?: InputMaybe<StringFilter>;
  tags?: InputMaybe<StringFilter>;
  registrationLink?: InputMaybe<StringFilter>;
  registrationRequired?: InputMaybe<BooleanFilter>;
  draft?: InputMaybe<BooleanFilter>;
};

export type EventsConnectionEdges = {
  __typename?: 'EventsConnectionEdges';
  cursor: Scalars['String']['output'];
  node?: Maybe<Events>;
};

export type EventsConnection = Connection & {
  __typename?: 'EventsConnection';
  pageInfo: PageInfo;
  totalCount: Scalars['Float']['output'];
  edges?: Maybe<Array<Maybe<EventsConnectionEdges>>>;
};

export type Sermons = Node & Document & {
  __typename?: 'Sermons';
  title: Scalars['String']['output'];
  slug?: Maybe<Scalars['String']['output']>;
  date: Scalars['String']['output'];
  speaker: Scalars['String']['output'];
  series?: Maybe<Scalars['String']['output']>;
  scripture?: Maybe<Scalars['String']['output']>;
  audioUrl?: Maybe<Scalars['String']['output']>;
  videoUrl?: Maybe<Scalars['String']['output']>;
  image?: Maybe<Scalars['String']['output']>;
  summary?: Maybe<Scalars['String']['output']>;
  tags?: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  draft?: Maybe<Scalars['Boolean']['output']>;
  id: Scalars['ID']['output'];
  _sys: SystemInfo;
  _values: Scalars['JSON']['output'];
};

export type SermonsFilter = {
  title?: InputMaybe<StringFilter>;
  slug?: InputMaybe<StringFilter>;
  date?: InputMaybe<DatetimeFilter>;
  speaker?: InputMaybe<StringFilter>;
  series?: InputMaybe<StringFilter>;
  scripture?: InputMaybe<StringFilter>;
  audioUrl?: InputMaybe<StringFilter>;
  videoUrl?: InputMaybe<StringFilter>;
  image?: InputMaybe<ImageFilter>;
  summary?: InputMaybe<StringFilter>;
  tags?: InputMaybe<StringFilter>;
  draft?: InputMaybe<BooleanFilter>;
};

export type SermonsConnectionEdges = {
  __typename?: 'SermonsConnectionEdges';
  cursor: Scalars['String']['output'];
  node?: Maybe<Sermons>;
};

export type SermonsConnection = Connection & {
  __typename?: 'SermonsConnection';
  pageInfo: PageInfo;
  totalCount: Scalars['Float']['output'];
  edges?: Maybe<Array<Maybe<SermonsConnectionEdges>>>;
};

export type Ministries = Node & Document & {
  __typename?: 'Ministries';
  name: Scalars['String']['output'];
  logo?: Maybe<Scalars['String']['output']>;
  summary: Scalars['String']['output'];
  coordinator?: Maybe<Scalars['String']['output']>;
  contact?: Maybe<Scalars['String']['output']>;
  schedule?: Maybe<Scalars['String']['output']>;
  order?: Maybe<Scalars['Float']['output']>;
  draft?: Maybe<Scalars['Boolean']['output']>;
  id: Scalars['ID']['output'];
  _sys: SystemInfo;
  _values: Scalars['JSON']['output'];
};

export type MinistriesFilter = {
  name?: InputMaybe<StringFilter>;
  logo?: InputMaybe<ImageFilter>;
  summary?: InputMaybe<StringFilter>;
  coordinator?: InputMaybe<StringFilter>;
  contact?: InputMaybe<StringFilter>;
  schedule?: InputMaybe<StringFilter>;
  order?: InputMaybe<NumberFilter>;
  draft?: InputMaybe<BooleanFilter>;
};

export type MinistriesConnectionEdges = {
  __typename?: 'MinistriesConnectionEdges';
  cursor: Scalars['String']['output'];
  node?: Maybe<Ministries>;
};

export type MinistriesConnection = Connection & {
  __typename?: 'MinistriesConnection';
  pageInfo: PageInfo;
  totalCount: Scalars['Float']['output'];
  edges?: Maybe<Array<Maybe<MinistriesConnectionEdges>>>;
};

export type BlogImage = {
  __typename?: 'BlogImage';
  url: Scalars['String']['output'];
  alt: Scalars['String']['output'];
};

export type Blog = Node & Document & {
  __typename?: 'Blog';
  title: Scalars['String']['output'];
  slug?: Maybe<Scalars['String']['output']>;
  pubDate: Scalars['String']['output'];
  description: Scalars['String']['output'];
  author?: Maybe<Scalars['String']['output']>;
  image?: Maybe<BlogImage>;
  tags?: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  draft?: Maybe<Scalars['Boolean']['output']>;
  id: Scalars['ID']['output'];
  _sys: SystemInfo;
  _values: Scalars['JSON']['output'];
};

export type BlogImageFilter = {
  url?: InputMaybe<ImageFilter>;
  alt?: InputMaybe<StringFilter>;
};

export type BlogFilter = {
  title?: InputMaybe<StringFilter>;
  slug?: InputMaybe<StringFilter>;
  pubDate?: InputMaybe<DatetimeFilter>;
  description?: InputMaybe<StringFilter>;
  author?: InputMaybe<StringFilter>;
  image?: InputMaybe<BlogImageFilter>;
  tags?: InputMaybe<StringFilter>;
  draft?: InputMaybe<BooleanFilter>;
};

export type BlogConnectionEdges = {
  __typename?: 'BlogConnectionEdges';
  cursor: Scalars['String']['output'];
  node?: Maybe<Blog>;
};

export type BlogConnection = Connection & {
  __typename?: 'BlogConnection';
  pageInfo: PageInfo;
  totalCount: Scalars['Float']['output'];
  edges?: Maybe<Array<Maybe<BlogConnectionEdges>>>;
};

export type SiteInfo = Node & Document & {
  __typename?: 'SiteInfo';
  title: Scalars['String']['output'];
  id: Scalars['ID']['output'];
  _sys: SystemInfo;
  _values: Scalars['JSON']['output'];
};

export type SiteInfoFilter = {
  title?: InputMaybe<StringFilter>;
};

export type SiteInfoConnectionEdges = {
  __typename?: 'SiteInfoConnectionEdges';
  cursor: Scalars['String']['output'];
  node?: Maybe<SiteInfo>;
};

export type SiteInfoConnection = Connection & {
  __typename?: 'SiteInfoConnection';
  pageInfo: PageInfo;
  totalCount: Scalars['Float']['output'];
  edges?: Maybe<Array<Maybe<SiteInfoConnectionEdges>>>;
};

export type Mutation = {
  __typename?: 'Mutation';
  addPendingDocument: DocumentNode;
  updateDocument: DocumentNode;
  deleteDocument: DocumentNode;
  createDocument: DocumentNode;
  createFolder: DocumentNode;
  updateStaff: Staff;
  createStaff: Staff;
  updateEvents: Events;
  createEvents: Events;
  updateSermons: Sermons;
  createSermons: Sermons;
  updateMinistries: Ministries;
  createMinistries: Ministries;
  updateBlog: Blog;
  createBlog: Blog;
  updateSiteInfo: SiteInfo;
  createSiteInfo: SiteInfo;
};


export type MutationAddPendingDocumentArgs = {
  collection: Scalars['String']['input'];
  relativePath: Scalars['String']['input'];
  template?: InputMaybe<Scalars['String']['input']>;
};


export type MutationUpdateDocumentArgs = {
  collection?: InputMaybe<Scalars['String']['input']>;
  relativePath: Scalars['String']['input'];
  params: DocumentUpdateMutation;
};


export type MutationDeleteDocumentArgs = {
  collection?: InputMaybe<Scalars['String']['input']>;
  relativePath: Scalars['String']['input'];
};


export type MutationCreateDocumentArgs = {
  collection?: InputMaybe<Scalars['String']['input']>;
  relativePath: Scalars['String']['input'];
  params: DocumentMutation;
};


export type MutationCreateFolderArgs = {
  collection?: InputMaybe<Scalars['String']['input']>;
  relativePath: Scalars['String']['input'];
};


export type MutationUpdateStaffArgs = {
  relativePath: Scalars['String']['input'];
  params: StaffMutation;
};


export type MutationCreateStaffArgs = {
  relativePath: Scalars['String']['input'];
  params: StaffMutation;
};


export type MutationUpdateEventsArgs = {
  relativePath: Scalars['String']['input'];
  params: EventsMutation;
};


export type MutationCreateEventsArgs = {
  relativePath: Scalars['String']['input'];
  params: EventsMutation;
};


export type MutationUpdateSermonsArgs = {
  relativePath: Scalars['String']['input'];
  params: SermonsMutation;
};


export type MutationCreateSermonsArgs = {
  relativePath: Scalars['String']['input'];
  params: SermonsMutation;
};


export type MutationUpdateMinistriesArgs = {
  relativePath: Scalars['String']['input'];
  params: MinistriesMutation;
};


export type MutationCreateMinistriesArgs = {
  relativePath: Scalars['String']['input'];
  params: MinistriesMutation;
};


export type MutationUpdateBlogArgs = {
  relativePath: Scalars['String']['input'];
  params: BlogMutation;
};


export type MutationCreateBlogArgs = {
  relativePath: Scalars['String']['input'];
  params: BlogMutation;
};


export type MutationUpdateSiteInfoArgs = {
  relativePath: Scalars['String']['input'];
  params: SiteInfoMutation;
};


export type MutationCreateSiteInfoArgs = {
  relativePath: Scalars['String']['input'];
  params: SiteInfoMutation;
};

export type DocumentUpdateMutation = {
  staff?: InputMaybe<StaffMutation>;
  events?: InputMaybe<EventsMutation>;
  sermons?: InputMaybe<SermonsMutation>;
  ministries?: InputMaybe<MinistriesMutation>;
  blog?: InputMaybe<BlogMutation>;
  siteInfo?: InputMaybe<SiteInfoMutation>;
  relativePath?: InputMaybe<Scalars['String']['input']>;
};

export type DocumentMutation = {
  staff?: InputMaybe<StaffMutation>;
  events?: InputMaybe<EventsMutation>;
  sermons?: InputMaybe<SermonsMutation>;
  ministries?: InputMaybe<MinistriesMutation>;
  blog?: InputMaybe<BlogMutation>;
  siteInfo?: InputMaybe<SiteInfoMutation>;
};

export type StaffMutation = {
  name?: InputMaybe<Scalars['String']['input']>;
  title?: InputMaybe<Scalars['String']['input']>;
  image?: InputMaybe<Scalars['String']['input']>;
  email?: InputMaybe<Scalars['String']['input']>;
  phone?: InputMaybe<Scalars['String']['input']>;
  bio?: InputMaybe<Scalars['String']['input']>;
  order?: InputMaybe<Scalars['Float']['input']>;
  draft?: InputMaybe<Scalars['Boolean']['input']>;
};

export type EventsMutation = {
  title?: InputMaybe<Scalars['String']['input']>;
  date?: InputMaybe<Scalars['String']['input']>;
  endDate?: InputMaybe<Scalars['String']['input']>;
  time?: InputMaybe<Scalars['String']['input']>;
  location?: InputMaybe<Scalars['String']['input']>;
  image?: InputMaybe<Scalars['String']['input']>;
  summary?: InputMaybe<Scalars['String']['input']>;
  tags?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  registrationLink?: InputMaybe<Scalars['String']['input']>;
  registrationRequired?: InputMaybe<Scalars['Boolean']['input']>;
  draft?: InputMaybe<Scalars['Boolean']['input']>;
};

export type SermonsMutation = {
  title?: InputMaybe<Scalars['String']['input']>;
  slug?: InputMaybe<Scalars['String']['input']>;
  date?: InputMaybe<Scalars['String']['input']>;
  speaker?: InputMaybe<Scalars['String']['input']>;
  series?: InputMaybe<Scalars['String']['input']>;
  scripture?: InputMaybe<Scalars['String']['input']>;
  audioUrl?: InputMaybe<Scalars['String']['input']>;
  videoUrl?: InputMaybe<Scalars['String']['input']>;
  image?: InputMaybe<Scalars['String']['input']>;
  summary?: InputMaybe<Scalars['String']['input']>;
  tags?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  draft?: InputMaybe<Scalars['Boolean']['input']>;
};

export type MinistriesMutation = {
  name?: InputMaybe<Scalars['String']['input']>;
  logo?: InputMaybe<Scalars['String']['input']>;
  summary?: InputMaybe<Scalars['String']['input']>;
  coordinator?: InputMaybe<Scalars['String']['input']>;
  contact?: InputMaybe<Scalars['String']['input']>;
  schedule?: InputMaybe<Scalars['String']['input']>;
  order?: InputMaybe<Scalars['Float']['input']>;
  draft?: InputMaybe<Scalars['Boolean']['input']>;
};

export type BlogImageMutation = {
  url?: InputMaybe<Scalars['String']['input']>;
  alt?: InputMaybe<Scalars['String']['input']>;
};

export type BlogMutation = {
  title?: InputMaybe<Scalars['String']['input']>;
  slug?: InputMaybe<Scalars['String']['input']>;
  pubDate?: InputMaybe<Scalars['String']['input']>;
  description?: InputMaybe<Scalars['String']['input']>;
  author?: InputMaybe<Scalars['String']['input']>;
  image?: InputMaybe<BlogImageMutation>;
  tags?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  draft?: InputMaybe<Scalars['Boolean']['input']>;
};

export type SiteInfoMutation = {
  title?: InputMaybe<Scalars['String']['input']>;
};

export type StaffPartsFragment = { __typename: 'Staff', name: string, title: string, image: string, email?: string | null, phone?: string | null, bio?: string | null, order?: number | null, draft?: boolean | null };

export type EventsPartsFragment = { __typename: 'Events', title: string, date: string, endDate?: string | null, time?: string | null, location: string, image: string, summary: string, tags?: Array<string | null> | null, registrationLink?: string | null, registrationRequired?: boolean | null, draft?: boolean | null };

export type SermonsPartsFragment = { __typename: 'Sermons', title: string, slug?: string | null, date: string, speaker: string, series?: string | null, scripture?: string | null, audioUrl?: string | null, videoUrl?: string | null, image?: string | null, summary?: string | null, tags?: Array<string | null> | null, draft?: boolean | null };

export type MinistriesPartsFragment = { __typename: 'Ministries', name: string, logo?: string | null, summary: string, coordinator?: string | null, contact?: string | null, schedule?: string | null, order?: number | null, draft?: boolean | null };

export type BlogPartsFragment = { __typename: 'Blog', title: string, slug?: string | null, pubDate: string, description: string, author?: string | null, tags?: Array<string | null> | null, draft?: boolean | null, image?: { __typename: 'BlogImage', url: string, alt: string } | null };

export type SiteInfoPartsFragment = { __typename: 'SiteInfo', title: string };

export type StaffQueryVariables = Exact<{
  relativePath: Scalars['String']['input'];
}>;


export type StaffQuery = { __typename?: 'Query', staff: { __typename: 'Staff', id: string, name: string, title: string, image: string, email?: string | null, phone?: string | null, bio?: string | null, order?: number | null, draft?: boolean | null, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, hasReferences?: boolean | null, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string } } };

export type StaffConnectionQueryVariables = Exact<{
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<StaffFilter>;
}>;


export type StaffConnectionQuery = { __typename?: 'Query', staffConnection: { __typename?: 'StaffConnection', totalCount: number, pageInfo: { __typename?: 'PageInfo', hasPreviousPage: boolean, hasNextPage: boolean, startCursor: string, endCursor: string }, edges?: Array<{ __typename?: 'StaffConnectionEdges', cursor: string, node?: { __typename: 'Staff', id: string, name: string, title: string, image: string, email?: string | null, phone?: string | null, bio?: string | null, order?: number | null, draft?: boolean | null, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, hasReferences?: boolean | null, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string } } | null } | null> | null } };

export type EventsQueryVariables = Exact<{
  relativePath: Scalars['String']['input'];
}>;


export type EventsQuery = { __typename?: 'Query', events: { __typename: 'Events', id: string, title: string, date: string, endDate?: string | null, time?: string | null, location: string, image: string, summary: string, tags?: Array<string | null> | null, registrationLink?: string | null, registrationRequired?: boolean | null, draft?: boolean | null, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, hasReferences?: boolean | null, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string } } };

export type EventsConnectionQueryVariables = Exact<{
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<EventsFilter>;
}>;


export type EventsConnectionQuery = { __typename?: 'Query', eventsConnection: { __typename?: 'EventsConnection', totalCount: number, pageInfo: { __typename?: 'PageInfo', hasPreviousPage: boolean, hasNextPage: boolean, startCursor: string, endCursor: string }, edges?: Array<{ __typename?: 'EventsConnectionEdges', cursor: string, node?: { __typename: 'Events', id: string, title: string, date: string, endDate?: string | null, time?: string | null, location: string, image: string, summary: string, tags?: Array<string | null> | null, registrationLink?: string | null, registrationRequired?: boolean | null, draft?: boolean | null, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, hasReferences?: boolean | null, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string } } | null } | null> | null } };

export type SermonsQueryVariables = Exact<{
  relativePath: Scalars['String']['input'];
}>;


export type SermonsQuery = { __typename?: 'Query', sermons: { __typename: 'Sermons', id: string, title: string, slug?: string | null, date: string, speaker: string, series?: string | null, scripture?: string | null, audioUrl?: string | null, videoUrl?: string | null, image?: string | null, summary?: string | null, tags?: Array<string | null> | null, draft?: boolean | null, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, hasReferences?: boolean | null, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string } } };

export type SermonsConnectionQueryVariables = Exact<{
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<SermonsFilter>;
}>;


export type SermonsConnectionQuery = { __typename?: 'Query', sermonsConnection: { __typename?: 'SermonsConnection', totalCount: number, pageInfo: { __typename?: 'PageInfo', hasPreviousPage: boolean, hasNextPage: boolean, startCursor: string, endCursor: string }, edges?: Array<{ __typename?: 'SermonsConnectionEdges', cursor: string, node?: { __typename: 'Sermons', id: string, title: string, slug?: string | null, date: string, speaker: string, series?: string | null, scripture?: string | null, audioUrl?: string | null, videoUrl?: string | null, image?: string | null, summary?: string | null, tags?: Array<string | null> | null, draft?: boolean | null, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, hasReferences?: boolean | null, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string } } | null } | null> | null } };

export type MinistriesQueryVariables = Exact<{
  relativePath: Scalars['String']['input'];
}>;


export type MinistriesQuery = { __typename?: 'Query', ministries: { __typename: 'Ministries', id: string, name: string, logo?: string | null, summary: string, coordinator?: string | null, contact?: string | null, schedule?: string | null, order?: number | null, draft?: boolean | null, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, hasReferences?: boolean | null, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string } } };

export type MinistriesConnectionQueryVariables = Exact<{
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<MinistriesFilter>;
}>;


export type MinistriesConnectionQuery = { __typename?: 'Query', ministriesConnection: { __typename?: 'MinistriesConnection', totalCount: number, pageInfo: { __typename?: 'PageInfo', hasPreviousPage: boolean, hasNextPage: boolean, startCursor: string, endCursor: string }, edges?: Array<{ __typename?: 'MinistriesConnectionEdges', cursor: string, node?: { __typename: 'Ministries', id: string, name: string, logo?: string | null, summary: string, coordinator?: string | null, contact?: string | null, schedule?: string | null, order?: number | null, draft?: boolean | null, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, hasReferences?: boolean | null, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string } } | null } | null> | null } };

export type BlogQueryVariables = Exact<{
  relativePath: Scalars['String']['input'];
}>;


export type BlogQuery = { __typename?: 'Query', blog: { __typename: 'Blog', id: string, title: string, slug?: string | null, pubDate: string, description: string, author?: string | null, tags?: Array<string | null> | null, draft?: boolean | null, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, hasReferences?: boolean | null, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string }, image?: { __typename: 'BlogImage', url: string, alt: string } | null } };

export type BlogConnectionQueryVariables = Exact<{
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<BlogFilter>;
}>;


export type BlogConnectionQuery = { __typename?: 'Query', blogConnection: { __typename?: 'BlogConnection', totalCount: number, pageInfo: { __typename?: 'PageInfo', hasPreviousPage: boolean, hasNextPage: boolean, startCursor: string, endCursor: string }, edges?: Array<{ __typename?: 'BlogConnectionEdges', cursor: string, node?: { __typename: 'Blog', id: string, title: string, slug?: string | null, pubDate: string, description: string, author?: string | null, tags?: Array<string | null> | null, draft?: boolean | null, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, hasReferences?: boolean | null, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string }, image?: { __typename: 'BlogImage', url: string, alt: string } | null } | null } | null> | null } };

export type SiteInfoQueryVariables = Exact<{
  relativePath: Scalars['String']['input'];
}>;


export type SiteInfoQuery = { __typename?: 'Query', siteInfo: { __typename: 'SiteInfo', id: string, title: string, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, hasReferences?: boolean | null, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string } } };

export type SiteInfoConnectionQueryVariables = Exact<{
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<SiteInfoFilter>;
}>;


export type SiteInfoConnectionQuery = { __typename?: 'Query', siteInfoConnection: { __typename?: 'SiteInfoConnection', totalCount: number, pageInfo: { __typename?: 'PageInfo', hasPreviousPage: boolean, hasNextPage: boolean, startCursor: string, endCursor: string }, edges?: Array<{ __typename?: 'SiteInfoConnectionEdges', cursor: string, node?: { __typename: 'SiteInfo', id: string, title: string, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, hasReferences?: boolean | null, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string } } | null } | null> | null } };

export const StaffPartsFragmentDoc = gql`
    fragment StaffParts on Staff {
  __typename
  name
  title
  image
  email
  phone
  bio
  order
  draft
}
    `;
export const EventsPartsFragmentDoc = gql`
    fragment EventsParts on Events {
  __typename
  title
  date
  endDate
  time
  location
  image
  summary
  tags
  registrationLink
  registrationRequired
  draft
}
    `;
export const SermonsPartsFragmentDoc = gql`
    fragment SermonsParts on Sermons {
  __typename
  title
  slug
  date
  speaker
  series
  scripture
  audioUrl
  videoUrl
  image
  summary
  tags
  draft
}
    `;
export const MinistriesPartsFragmentDoc = gql`
    fragment MinistriesParts on Ministries {
  __typename
  name
  logo
  summary
  coordinator
  contact
  schedule
  order
  draft
}
    `;
export const BlogPartsFragmentDoc = gql`
    fragment BlogParts on Blog {
  __typename
  title
  slug
  pubDate
  description
  author
  image {
    __typename
    url
    alt
  }
  tags
  draft
}
    `;
export const SiteInfoPartsFragmentDoc = gql`
    fragment SiteInfoParts on SiteInfo {
  __typename
  title
}
    `;
export const StaffDocument = gql`
    query staff($relativePath: String!) {
  staff(relativePath: $relativePath) {
    ... on Document {
      _sys {
        filename
        basename
        hasReferences
        breadcrumbs
        path
        relativePath
        extension
      }
      id
    }
    ...StaffParts
  }
}
    ${StaffPartsFragmentDoc}`;
export const StaffConnectionDocument = gql`
    query staffConnection($before: String, $after: String, $first: Float, $last: Float, $sort: String, $filter: StaffFilter) {
  staffConnection(
    before: $before
    after: $after
    first: $first
    last: $last
    sort: $sort
    filter: $filter
  ) {
    pageInfo {
      hasPreviousPage
      hasNextPage
      startCursor
      endCursor
    }
    totalCount
    edges {
      cursor
      node {
        ... on Document {
          _sys {
            filename
            basename
            hasReferences
            breadcrumbs
            path
            relativePath
            extension
          }
          id
        }
        ...StaffParts
      }
    }
  }
}
    ${StaffPartsFragmentDoc}`;
export const EventsDocument = gql`
    query events($relativePath: String!) {
  events(relativePath: $relativePath) {
    ... on Document {
      _sys {
        filename
        basename
        hasReferences
        breadcrumbs
        path
        relativePath
        extension
      }
      id
    }
    ...EventsParts
  }
}
    ${EventsPartsFragmentDoc}`;
export const EventsConnectionDocument = gql`
    query eventsConnection($before: String, $after: String, $first: Float, $last: Float, $sort: String, $filter: EventsFilter) {
  eventsConnection(
    before: $before
    after: $after
    first: $first
    last: $last
    sort: $sort
    filter: $filter
  ) {
    pageInfo {
      hasPreviousPage
      hasNextPage
      startCursor
      endCursor
    }
    totalCount
    edges {
      cursor
      node {
        ... on Document {
          _sys {
            filename
            basename
            hasReferences
            breadcrumbs
            path
            relativePath
            extension
          }
          id
        }
        ...EventsParts
      }
    }
  }
}
    ${EventsPartsFragmentDoc}`;
export const SermonsDocument = gql`
    query sermons($relativePath: String!) {
  sermons(relativePath: $relativePath) {
    ... on Document {
      _sys {
        filename
        basename
        hasReferences
        breadcrumbs
        path
        relativePath
        extension
      }
      id
    }
    ...SermonsParts
  }
}
    ${SermonsPartsFragmentDoc}`;
export const SermonsConnectionDocument = gql`
    query sermonsConnection($before: String, $after: String, $first: Float, $last: Float, $sort: String, $filter: SermonsFilter) {
  sermonsConnection(
    before: $before
    after: $after
    first: $first
    last: $last
    sort: $sort
    filter: $filter
  ) {
    pageInfo {
      hasPreviousPage
      hasNextPage
      startCursor
      endCursor
    }
    totalCount
    edges {
      cursor
      node {
        ... on Document {
          _sys {
            filename
            basename
            hasReferences
            breadcrumbs
            path
            relativePath
            extension
          }
          id
        }
        ...SermonsParts
      }
    }
  }
}
    ${SermonsPartsFragmentDoc}`;
export const MinistriesDocument = gql`
    query ministries($relativePath: String!) {
  ministries(relativePath: $relativePath) {
    ... on Document {
      _sys {
        filename
        basename
        hasReferences
        breadcrumbs
        path
        relativePath
        extension
      }
      id
    }
    ...MinistriesParts
  }
}
    ${MinistriesPartsFragmentDoc}`;
export const MinistriesConnectionDocument = gql`
    query ministriesConnection($before: String, $after: String, $first: Float, $last: Float, $sort: String, $filter: MinistriesFilter) {
  ministriesConnection(
    before: $before
    after: $after
    first: $first
    last: $last
    sort: $sort
    filter: $filter
  ) {
    pageInfo {
      hasPreviousPage
      hasNextPage
      startCursor
      endCursor
    }
    totalCount
    edges {
      cursor
      node {
        ... on Document {
          _sys {
            filename
            basename
            hasReferences
            breadcrumbs
            path
            relativePath
            extension
          }
          id
        }
        ...MinistriesParts
      }
    }
  }
}
    ${MinistriesPartsFragmentDoc}`;
export const BlogDocument = gql`
    query blog($relativePath: String!) {
  blog(relativePath: $relativePath) {
    ... on Document {
      _sys {
        filename
        basename
        hasReferences
        breadcrumbs
        path
        relativePath
        extension
      }
      id
    }
    ...BlogParts
  }
}
    ${BlogPartsFragmentDoc}`;
export const BlogConnectionDocument = gql`
    query blogConnection($before: String, $after: String, $first: Float, $last: Float, $sort: String, $filter: BlogFilter) {
  blogConnection(
    before: $before
    after: $after
    first: $first
    last: $last
    sort: $sort
    filter: $filter
  ) {
    pageInfo {
      hasPreviousPage
      hasNextPage
      startCursor
      endCursor
    }
    totalCount
    edges {
      cursor
      node {
        ... on Document {
          _sys {
            filename
            basename
            hasReferences
            breadcrumbs
            path
            relativePath
            extension
          }
          id
        }
        ...BlogParts
      }
    }
  }
}
    ${BlogPartsFragmentDoc}`;
export const SiteInfoDocument = gql`
    query siteInfo($relativePath: String!) {
  siteInfo(relativePath: $relativePath) {
    ... on Document {
      _sys {
        filename
        basename
        hasReferences
        breadcrumbs
        path
        relativePath
        extension
      }
      id
    }
    ...SiteInfoParts
  }
}
    ${SiteInfoPartsFragmentDoc}`;
export const SiteInfoConnectionDocument = gql`
    query siteInfoConnection($before: String, $after: String, $first: Float, $last: Float, $sort: String, $filter: SiteInfoFilter) {
  siteInfoConnection(
    before: $before
    after: $after
    first: $first
    last: $last
    sort: $sort
    filter: $filter
  ) {
    pageInfo {
      hasPreviousPage
      hasNextPage
      startCursor
      endCursor
    }
    totalCount
    edges {
      cursor
      node {
        ... on Document {
          _sys {
            filename
            basename
            hasReferences
            breadcrumbs
            path
            relativePath
            extension
          }
          id
        }
        ...SiteInfoParts
      }
    }
  }
}
    ${SiteInfoPartsFragmentDoc}`;
export type Requester<C= {}> = <R, V>(doc: DocumentNode, vars?: V, options?: C) => Promise<R>
  export function getSdk<C>(requester: Requester<C>) {
    return {
      staff(variables: StaffQueryVariables, options?: C): Promise<{data: StaffQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: StaffQueryVariables, query: string}> {
        return requester<{data: StaffQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: StaffQueryVariables, query: string}, StaffQueryVariables>(StaffDocument, variables, options);
      },
    staffConnection(variables?: StaffConnectionQueryVariables, options?: C): Promise<{data: StaffConnectionQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: StaffConnectionQueryVariables, query: string}> {
        return requester<{data: StaffConnectionQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: StaffConnectionQueryVariables, query: string}, StaffConnectionQueryVariables>(StaffConnectionDocument, variables, options);
      },
    events(variables: EventsQueryVariables, options?: C): Promise<{data: EventsQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: EventsQueryVariables, query: string}> {
        return requester<{data: EventsQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: EventsQueryVariables, query: string}, EventsQueryVariables>(EventsDocument, variables, options);
      },
    eventsConnection(variables?: EventsConnectionQueryVariables, options?: C): Promise<{data: EventsConnectionQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: EventsConnectionQueryVariables, query: string}> {
        return requester<{data: EventsConnectionQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: EventsConnectionQueryVariables, query: string}, EventsConnectionQueryVariables>(EventsConnectionDocument, variables, options);
      },
    sermons(variables: SermonsQueryVariables, options?: C): Promise<{data: SermonsQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: SermonsQueryVariables, query: string}> {
        return requester<{data: SermonsQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: SermonsQueryVariables, query: string}, SermonsQueryVariables>(SermonsDocument, variables, options);
      },
    sermonsConnection(variables?: SermonsConnectionQueryVariables, options?: C): Promise<{data: SermonsConnectionQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: SermonsConnectionQueryVariables, query: string}> {
        return requester<{data: SermonsConnectionQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: SermonsConnectionQueryVariables, query: string}, SermonsConnectionQueryVariables>(SermonsConnectionDocument, variables, options);
      },
    ministries(variables: MinistriesQueryVariables, options?: C): Promise<{data: MinistriesQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: MinistriesQueryVariables, query: string}> {
        return requester<{data: MinistriesQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: MinistriesQueryVariables, query: string}, MinistriesQueryVariables>(MinistriesDocument, variables, options);
      },
    ministriesConnection(variables?: MinistriesConnectionQueryVariables, options?: C): Promise<{data: MinistriesConnectionQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: MinistriesConnectionQueryVariables, query: string}> {
        return requester<{data: MinistriesConnectionQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: MinistriesConnectionQueryVariables, query: string}, MinistriesConnectionQueryVariables>(MinistriesConnectionDocument, variables, options);
      },
    blog(variables: BlogQueryVariables, options?: C): Promise<{data: BlogQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: BlogQueryVariables, query: string}> {
        return requester<{data: BlogQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: BlogQueryVariables, query: string}, BlogQueryVariables>(BlogDocument, variables, options);
      },
    blogConnection(variables?: BlogConnectionQueryVariables, options?: C): Promise<{data: BlogConnectionQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: BlogConnectionQueryVariables, query: string}> {
        return requester<{data: BlogConnectionQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: BlogConnectionQueryVariables, query: string}, BlogConnectionQueryVariables>(BlogConnectionDocument, variables, options);
      },
    siteInfo(variables: SiteInfoQueryVariables, options?: C): Promise<{data: SiteInfoQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: SiteInfoQueryVariables, query: string}> {
        return requester<{data: SiteInfoQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: SiteInfoQueryVariables, query: string}, SiteInfoQueryVariables>(SiteInfoDocument, variables, options);
      },
    siteInfoConnection(variables?: SiteInfoConnectionQueryVariables, options?: C): Promise<{data: SiteInfoConnectionQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: SiteInfoConnectionQueryVariables, query: string}> {
        return requester<{data: SiteInfoConnectionQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: SiteInfoConnectionQueryVariables, query: string}, SiteInfoConnectionQueryVariables>(SiteInfoConnectionDocument, variables, options);
      }
    };
  }
  export type Sdk = ReturnType<typeof getSdk>;

// TinaSDK generated code
import { createClient, TinaClient } from "tinacms/dist/client";

const generateRequester = (
  client: TinaClient,
) => {
  const requester: (
    doc: any,
    vars?: any,
    options?: {
      branch?: string,
      /**
       * Aside from `method` and `body`, all fetch options are passed
       * through to underlying fetch request
       */
      fetchOptions?: Omit<Parameters<typeof fetch>[1], 'body' | 'method'>,
    },
    client
  ) => Promise<any> = async (doc, vars, options) => {
    let url = client.apiUrl
    if (options?.branch) {
      const index = client.apiUrl.lastIndexOf('/')
      url = client.apiUrl.substring(0, index + 1) + options.branch
    }
    const data = await client.request({
      query: doc,
      variables: vars,
      url,
    }, options)

    return { data: data?.data, errors: data?.errors, query: doc, variables: vars || {} }
  }

  return requester
}

/**
 * @experimental this class can be used but may change in the future
 **/
export const ExperimentalGetTinaClient = () =>
  getSdk(
    generateRequester(
      createClient({
        url: "https://content.tinajs.io/1.6/content/8011c0a6-7c87-45ac-9dcc-7e97f25065f7/github/main",
        queries,
      })
    )
  )

export const queries = (
  client: TinaClient,
) => {
  const requester = generateRequester(client)
  return getSdk(requester)
}

  